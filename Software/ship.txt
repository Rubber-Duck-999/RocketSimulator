#include "graphics.h"

Graphics::Graphics()
{
    RunWindow();
}

void Graphics::RunWindow()
{
    BOOST_LOG_TRIVIAL(debug) << "Running Graphics ";
    namespace data = rocket_simulator;
    sf::RenderWindow window(sf::VideoMode(data::kWindowSizeHori, data::kWindowSizeVert), data::kWindowName, sf::Style::Close);
    /////////////////////////////////////////////
    // Texture
    sf::Texture rocket_texture;
    if(!rocket_texture.loadFromFile(data::kRocketImage, sf::IntRect(10, 10, 32, 32)))
    {
        BOOST_LOG_TRIVIAL(error) << "Error loading Rocket Image";
    }
    rocket_texture.setSmooth(true);
    /////////////////////////////////////////////

    /////////////////////////////////////////////
    // Entity
    sf::Sprite rocket_sprite;
    //rocket_sprite.setTexture(rocket_texture);
    rocket_sprite.setRotation(90.f); 
    // absolute angle
    //rocket_sprite.setOrigin(sf::Vector2f(400.f, 500.f));
    /////////////////////////////////////////////

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear();
        window.draw(rocket_sprite);
        window.display();
    }
}

class Ship: public sf::Sprite
{
    float speed, accel;
    float x_vel, y_vel;

    sf::Texture texture;
public:
    Ship()
    {
        texture.loadFromFile(rocket_simulator::kRocketImage);
        setTexture(texture);

        sf::Vector2f origin;
        origin.x = getTextureRect().width / 2;
        origin.y = getTextureRect().height / 2;
        setOrigin(origin);

        x_vel = 0;
        y_vel = 0;
        accel = 30;
        speed = 100;
    }

    void update(float dt, sf::Vector2f mouse_position)
    {
        sf::Vector2f position = getPosition();
        float angle = atan2(mouse_position.y - position.y, mouse_position.x - position.x);

        setRotation(angle*180/rocket_simulator::kPI);

        x_vel = cos(angle) * speed;
        y_vel = sin(angle) * speed;

        if(sf::Keyboard::isKeyPressed(sf::Keyboard::W))
        {
            move(x_vel * dt, y_vel * dt);
        }

        else if(sf::Keyboard::isKeyPressed(sf::Keyboard::S))
        {
            move(-x_vel * dt, -y_vel * dt);
        }
    }
};

class Game
{
public:
    void main(sf::RenderWindow& window)
    {
        Ship ship;
        ship.setPosition(400, 400);

        //AimSight sight;

        sf::Clock clock;
        while (window.isOpen())
        {
            float dt = clock.restart().asSeconds();
            sf::Event event;
            while (window.pollEvent(event))
            {
                if (event.type == sf::Event::Closed)
                {
                    window.close();
                }
            }
            window.clear();

            sf::Vector2f mouse_position = sf::Vector2f(sf::Mouse::getPosition(window));
            ship.update(dt, mouse_position);

            window.draw(ship);
            window.display();
        }
    }
};

void Graphics::RunRocket()
{
    sf::RenderWindow window(sf::VideoMode(1200, 800), "SFML works!");
    Game().main(window);
}
